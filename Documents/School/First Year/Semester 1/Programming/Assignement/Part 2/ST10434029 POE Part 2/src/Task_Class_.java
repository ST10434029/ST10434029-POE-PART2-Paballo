/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */


import st10434029.poe.part.pkg2.*;
import java.util.Scanner;
import javax.swing.JOptionPane;

/**
 *
 * @author mac
 */
public class Task_Class_ {

    public static Task_Class_ TaskItems[];
    private String TaskName;
    private String TaskDescription;
    private String DeveloperDetails;
    private String TaskID;
    private String TaskStatus;

    private int TaskNumber = 0;
    private int id = 0;
    private int TaskDuration;
    public static int NumTasks;

    //Constructor class to fill the contents of the task
    //Constructor is for assignment only
    public Task_Class_() {

        
       

    }

    //Generate Task ID  
    private void createTaskID(String taskName, String taskDeveloper) {
        String IDname;
        String IDdeveloper;

        //Takes the first two character from the task name    
        IDname = taskName.substring(0, 2);

        //Code Attribution
        //This method was taken from Stack overflow
        //https://stackoverflow.com/questions/15253406/get-the-last-three-chars-from-any-string-java
        //Egor
        //https://stackoverflow.com/users/543539/egor
        IDdeveloper = taskDeveloper.substring(taskDeveloper.length() - 3);

        //Task ID is generated by combining IDname with a colon and then the task number followed by another colon and then taskDeveloper
        TaskID = IDname + ":" + TaskNumber + ":" + IDdeveloper;

    }

    //Generate Task Number  
    public void TaskNumber() {
        TaskNumber++;
    }

    public void Menu() {
        do {
            
            //JOptionPane.showInputDialog("Please choose an option. Enter the option number: ");

            System.out.println("Menu Options: " + "\n" + "1. Add Tasks" + "\n" + "2. Show Report" + "\n" + "3. Quit");
            System.out.println("Please choose an option. Enter the option number: ");

            Scanner in = new Scanner(System.in);
            String Option = in.nextLine();

            Task_Class_ TSK1 = new Task_Class_();
            //If the user selects option one they are prompted to add a task, a description and developer details through appropriate methods
            if (Option.equals("1")) {

                System.out.print("How many tasks do you want to add?: ");
                NumTasks = in.nextInt();
                TaskItems = new Task_Class_[NumTasks];
                for (int n = 0; n < NumTasks; n++) {
                    TSK1.AddTask(n);
                }

            } //If user selects option 2 then the system will output
            else if (Option.equals("2")) {
                System.out.println("Coming soon!");
            } //If user selects 3 then the program will break as they have quit
            else if (Option.equals("3")) {
                break;
            } //This will ensure that nothing entered besides "1", "2" or "3" will be accepted and will direct user to choose of those options
            else {
                System.out.println("Invalid choice. Please choose from option 1, 2 or 3");
            }
        } while (1 != 0);
    }

    //Method to enable user to add a task
    public void AddTask(int numindex) {

        Scanner in = new Scanner(System.in);

        System.out.print("Enter Task Name: ");
        this.TaskName = in.nextLine();

        //Prompt user to write a task description and then capture it
        System.out.print("Enter a description of the task (it should not exceed 50 characters): ");
        this.TaskDescription = in.nextLine();

        //Prompt user to add the details of the developer and then capture it
        System.out.println("Enter developer details: ");
        this.DeveloperDetails = in.nextLine();
        
        //Call method that will check the length of the description
        CheckDescriptionLength(DeveloperDetails);

        //Generate a task number
        TaskNumber();
        
        createTaskID(DeveloperDetails, DeveloperDetails);
        
        System.out.println(ShowStatusreport());

      //  System.out.println("Please select task status: ");

        TaskItems[numindex] = this;

    }

    public void AssignStatus() {

    }

    //Method to generate a report on the status of the tasks
    public void ShowStatus() {
        String StatusChoice;
        Scanner in = new Scanner(System.in);
        
        System.out.println("\n" + "1. Doing" + "\n" + "2. To Do" + "\n" + "3. Done");
        System.out.println("Enter the status of the task: ");
        StatusChoice = in.nextLine();
        if (StatusChoice.equals("1")) {
            System.out.println();
        }

    }

    //Method that checks the length of the variable stored in it and checks if it's less than 50
    public void CheckDescriptionLength(String DescriptionLength) {
        DescriptionLength = TaskDescription;
        if (DescriptionLength.length() > 50) {
            System.out.println("Please enter a task description of less than 50 characters");
        } else {
            System.out.println("Task successfully captured");
        }
    }

    //Method that prompts user to enter the estimated hours for the task
    public void TaskDuration() {
        Scanner in = new Scanner(System.in);
        System.out.print("Enter the  estimated hours for task: ");
        this.TaskDuration = in.nextInt();
        System.out.println("Estimated hours: " + TaskDuration + " hours");
    }

    //Status 
    public String ShowStatusreport() {
        return "\nStatus Report:" + "\n"
                + "\nTask Number: " + TaskNumber
                + "\nTask Name: " + TaskName + " "
                + "\nTask ID: " + TaskID +    
                "\nTask Description: " + TaskDescription
                + "\nDeveloper Details: " + DeveloperDetails;
    }

}
